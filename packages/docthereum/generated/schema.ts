// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class labAuthorisedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("_authAddress", Value.fromBytes(Bytes.empty()));
    this.set("authId", Value.fromString(""));
    this.set("authOnDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save labAuthorisedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type labAuthorisedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("labAuthorisedEntity", id.toString(), this);
    }
  }

  static load(id: string): labAuthorisedEntity | null {
    return changetype<labAuthorisedEntity | null>(
      store.get("labAuthorisedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get _authAddress(): Bytes {
    let value = this.get("_authAddress");
    return value!.toBytes();
  }

  set _authAddress(value: Bytes) {
    this.set("_authAddress", Value.fromBytes(value));
  }

  get authId(): string {
    let value = this.get("authId");
    return value!.toString();
  }

  set authId(value: string) {
    this.set("authId", Value.fromString(value));
  }

  get authOnDate(): BigInt {
    let value = this.get("authOnDate");
    return value!.toBigInt();
  }

  set authOnDate(value: BigInt) {
    this.set("authOnDate", Value.fromBigInt(value));
  }
}

export class docAuthorisedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("_authAddress", Value.fromBytes(Bytes.empty()));
    this.set("authId", Value.fromString(""));
    this.set("authOnDate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save docAuthorisedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type docAuthorisedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("docAuthorisedEntity", id.toString(), this);
    }
  }

  static load(id: string): docAuthorisedEntity | null {
    return changetype<docAuthorisedEntity | null>(
      store.get("docAuthorisedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get _authAddress(): Bytes {
    let value = this.get("_authAddress");
    return value!.toBytes();
  }

  set _authAddress(value: Bytes) {
    this.set("_authAddress", Value.fromBytes(value));
  }

  get authId(): string {
    let value = this.get("authId");
    return value!.toString();
  }

  set authId(value: string) {
    this.set("authId", Value.fromString(value));
  }

  get authOnDate(): BigInt {
    let value = this.get("authOnDate");
    return value!.toBigInt();
  }

  set authOnDate(value: BigInt) {
    this.set("authOnDate", Value.fromBigInt(value));
  }
}

export class applicationResultEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("_applicantAddres", Value.fromBytes(Bytes.empty()));
    this.set("status", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save applicationResultEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type applicationResultEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("applicationResultEntity", id.toString(), this);
    }
  }

  static load(id: string): applicationResultEntity | null {
    return changetype<applicationResultEntity | null>(
      store.get("applicationResultEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get _applicantAddres(): Bytes {
    let value = this.get("_applicantAddres");
    return value!.toBytes();
  }

  set _applicantAddres(value: Bytes) {
    this.set("_applicantAddres", Value.fromBytes(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class reportSavedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("fileId", Value.fromString(""));
    this.set("category", Value.fromString(""));
    this.set("patientName", Value.fromBytes(Bytes.empty()));
    this.set("labName", Value.fromBytes(Bytes.empty()));
    this.set("addedAt", Value.fromBigInt(BigInt.zero()));
    this.set("age", Value.fromBigInt(BigInt.zero()));
    this.set("weight", Value.fromBigInt(BigInt.zero()));
    this.set("height", Value.fromBigInt(BigInt.zero()));
    this.set("bloodGroup", Value.fromString(""));
    this.set("Gender", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save reportSavedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type reportSavedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("reportSavedEntity", id.toString(), this);
    }
  }

  static load(id: string): reportSavedEntity | null {
    return changetype<reportSavedEntity | null>(
      store.get("reportSavedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get fileId(): string {
    let value = this.get("fileId");
    return value!.toString();
  }

  set fileId(value: string) {
    this.set("fileId", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value!.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get patientName(): Bytes {
    let value = this.get("patientName");
    return value!.toBytes();
  }

  set patientName(value: Bytes) {
    this.set("patientName", Value.fromBytes(value));
  }

  get labName(): Bytes {
    let value = this.get("labName");
    return value!.toBytes();
  }

  set labName(value: Bytes) {
    this.set("labName", Value.fromBytes(value));
  }

  get addedAt(): BigInt {
    let value = this.get("addedAt");
    return value!.toBigInt();
  }

  set addedAt(value: BigInt) {
    this.set("addedAt", Value.fromBigInt(value));
  }

  get age(): BigInt {
    let value = this.get("age");
    return value!.toBigInt();
  }

  set age(value: BigInt) {
    this.set("age", Value.fromBigInt(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value!.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }

  get bloodGroup(): string {
    let value = this.get("bloodGroup");
    return value!.toString();
  }

  set bloodGroup(value: string) {
    this.set("bloodGroup", Value.fromString(value));
  }

  get Gender(): string {
    let value = this.get("Gender");
    return value!.toString();
  }

  set Gender(value: string) {
    this.set("Gender", Value.fromString(value));
  }
}
